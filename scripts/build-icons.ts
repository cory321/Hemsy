import fs from 'node:fs';
import path from 'node:path';
import { getIconData, iconToSVG, replaceIDs } from '@iconify/utils';
// Remix icons collection JSON
import ri from '@iconify/json/json/ri.json';

const manifestPath = path.resolve('scripts/icon-manifest.json');
const outCssPath = path.resolve('public/icons/generated-icons.css');

function svgToDataURI(svg: string): string {
  const encoded = svg
    .replace(/#/g, '%23')
    .replace(/\"/g, "'")
    .replace(/\s+/g, ' ')
    .trim();
  return `data:image/svg+xml;utf8,${encoded}`;
}

async function build() {
  if (!fs.existsSync(manifestPath)) {
    throw new Error(`Icon manifest not found at ${manifestPath}`);
  }

  const names: string[] = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

  let css = `/* Generated by scripts/build-icons.ts */\n`;
  css += `.ri{display:inline-block;width:1em;height:1em;vertical-align:-0.125em}\n`;
  css += `.ri{background-color:currentColor}\n`;

  for (const name of names) {
    const short = name.replace(/^ri-/, '');
    const iconData = getIconData(ri, short);
    if (!iconData) {
      console.warn(`Missing icon: ${name}`);
      continue;
    }

    const render = iconToSVG(iconData, { height: '1em' });
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" ${Object.entries(
      render.attributes as Record<string, string>
    )
      .map(([k, v]) => `${k}="${v}"`)
      .join(' ')}>${replaceIDs(render.body)}</svg>`;

    const dataUri = svgToDataURI(svg);
    css += `.${name}{-webkit-mask:url("${dataUri}") no-repeat center/contain;mask:url("${dataUri}") no-repeat center/contain}\n`;
  }

  fs.mkdirSync(path.dirname(outCssPath), { recursive: true });
  fs.writeFileSync(outCssPath, css, 'utf8');
  console.log(`Wrote ${outCssPath}`);
}

build().catch((err) => {
  console.error(err);
  process.exit(1);
});
